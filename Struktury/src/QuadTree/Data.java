package QuadTree;

import org.jetbrains.annotations.NotNull;

import java.util.UUID;

/**
 * Represent any data, which can be inserted into quad tree.
 * Because data inserted into quad tree needs to have coordinates,
 * this class holds data of type T - so we can put there anything,
 * and at the same time class contains coordinates of data ensuring every
 * data which we want to insert into quadtree has coordinates. Class
 * also contains primary key which is generated by UUID random generator of
 * unique key.
 */

// TODO dopis popis triedy ked sa v tom sama zorientujes...
// TODO potrebujes zabezpecit enkapuslaciu.
// Asi to neni koser si myslim. Akoze tie gettre...minimalne tie cooridantes

public class Data<T> {
    private T data;
    private UUID primaryKey;
    private Coordinates coordinates;

    public Data(T parData, Coordinates parCoordinates, UUID parPrimaryKey) {
        this.data = parData;
        this.coordinates = parCoordinates;
        this.primaryKey = parPrimaryKey;
    }


    public T getData() {
        return this.data;
    }

    public Coordinates getCoordinates() {
        return this.coordinates;
    }

    public UUID getPrimaryKey() {
        return this.primaryKey;
    }

    public boolean equals(Data<T> parAnotherData) {
        return this.primaryKey.equals(parAnotherData.getPrimaryKey());
    }

    public void setCoordinates(Coordinates parCoordinates) {
        this.coordinates = parCoordinates;
    }

    public String toString() {
        return "Object with pk: " + this.primaryKey + " i know its terrifying...and it has coordinates:" +
                " x1: " + getCoordinates().getLowerX() +
                "y1: " + getCoordinates().getLowerY() +
                "x2: " + getCoordinates().getUpperX() +
                "y2: "+ getCoordinates().getUpperY();
    }

}